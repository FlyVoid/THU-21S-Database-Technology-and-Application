# 0. 输入成绩单，并存储为列表，嵌套字典
def input_course(inputCourse):
    #分割每一个信息,存储到courseSplit
    courseSplit=inputCourse.split( ) #按照空格或换行分割
    #courseSplit=['微积分B(1)', '5', '3.0', '线性代数(1)', '4', '2.7',...]
    #将courseSplit分离，分别存储为课程名列表，学分列表，绩点列表
    courseList=[0 for x in range(len(courseSplit)//3)]
    creditList_0=[0 for x in range(len(courseSplit)//3)]
    gradeList=[0 for x in range(len(courseSplit)//3)]
    i=0
    for j in range(len(courseSplit)): 
        if j%3 == 0:
            courseList[i]=courseSplit[j] #courseList为包含所有课程名的列表
            pass
        elif j%3 == 1:
            creditList_0[i]=courseSplit[j] #creditList_0为包含所有学分的列表
            pass
        else :
            gradeList[i]=courseSplit[j] #gradeList为包含所有绩点的列表
            i=i+1
            pass
    creditList=[int(x) for x in creditList_0] #将creditList换做int存储
    k=0
    for k in range(len(gradeList)):      #gradeList里如果绩点不为P/W，换用float存储 
        if gradeList[k]=='P':
            pass                                 
        elif gradeList[k]=='W':
            pass
        elif gradeList[k]=='F':
            pass
        else:
            gradeList[k]=float(gradeList[k])       
    # 初始化sumList列表，并依次将上述三表存入
    sumList=[{'课程名':0,'学分':0,'绩点':0} for x in range(len(courseSplit)//3)] 
    i=0
    while i<len(courseList):
        sumList[i]['课程名']=courseList[i]
        sumList[i]['学分']=creditList[i]
        sumList[i]['绩点']=gradeList[i]
        i=i+1
    # sumList=[{'课程名': '微积分B(1)', '学分': 5, '绩点': 3.0,} , …]
    return sumList


#1. 查询GPA
def gpa_count(sumList):
    #计算总学分    
    creditSumDelP=0
    for i in range(len(sumList)):
        if sumList[i]['绩点'] == 'W': #当绩点等于W时不计学分
            pass
        elif sumList[i]['绩点'] == 'P':#当绩点等于P时不计学分
            pass
        elif sumList[i]['绩点'] == 'F':
            pass
        else:
            creditSumDelP=int(sumList[i]['学分'])+creditSumDelP         
    #计算绩点乘学分的乘积和            
    gradePoint = 0
    for i in range(len(sumList)):
        if sumList[i]['绩点'] == 'W':
            pass
        elif sumList[i]['绩点'] == 'P':
            pass
        elif sumList[i]['绩点'] == 'F':
            pass
        else:
            gradePoint=int(sumList[i]['学分'])*float(sumList[i]['绩点'])+gradePoint  
   
    return creditSumDelP,gradePoint



#2. 查询总学分
def credit_count(sumList):
    creditSum=0
    for i in range(len(sumList)):
        if sumList[i]['绩点'] == 'W':    #当绩点等于W时不计学分
            pass
        elif sumList[i]['绩点'] == 'F':    #当绩点等于F时不计学分
            pass
        else:
            creditSum=int(sumList[i]['学分'])+creditSum #累加学分
    print('您的总学分为 %d ' % creditSum)



#3. 查询绩点高于GPA的科目
def course_great(sumList):
    creditSumDelP,gradePoint = gpa_count(sumList)
    sumList_0=[0 for x in range(len(sumList))] #该变量是为了未来排除所有有成绩的课程成绩一样，导致输出为空的情况
    if creditSumDelP == 0:
        print('您没有有成绩的课程，无法查询绩点高于GPA的科目')
    else:
        GPA = gradePoint/creditSumDelP
        for i in range(len(sumList)):
            if sumList[i]['绩点'] == 'W':
                pass
            elif sumList[i]['绩点'] == 'P':
                pass
            elif sumList[i]['绩点'] == 'F':
                pass
            elif float(sumList[i]['绩点']) > GPA:
                sumList_0[i]=sumList[i]
                print(sumList[i])
            else:
                pass
    if sumList_0==[0 for x in range(len(sumList))]:
        print('您没有绩点高于GPA的科目，因为所有有成绩的课程绩点相等')
    else:
        pass
    
        

    
#主程序：创建交互界面
#输出交互界面的文字显示
print("--------------GPA计算器加强版-----------------")
while True:
    print('输入以下命令执行不同操作：')
    print('0、退出') 
    print('1、查询GPA') 
    print('2、查询总学分') 
    print('3、查询绩点高于GPA的科目')    
#0.2 输入不同数字，进入不同的函数进行操作
    choice=int(input('您的选择（数字）：')) #注意这里要转换成int后面才能做比较
    if choice == 0:  
        break
    elif choice == 1:
        SumList = input_course(input('请按课程名、学分、绩点依次输入：\n'))
        CreditSumDelP,GradePoint = gpa_count(SumList)
        print('\n') 
        if CreditSumDelP == 0:
            print('您没有有成绩的课程，无法计算平均GPA')
        else:
            GPA = GradePoint/CreditSumDelP
            print("你的GPA为 %.2f " % GPA)
        print('\n')  
        pass
    elif choice == 2:
        SumList=input_course(input('请按课程名、学分、绩点依次输入：\n'))
        print('\n') 
        credit_count(SumList)
        print('\n')
        pass
    elif choice == 3:
        SumList=input_course(input('请按课程名、学分、绩点依次输入：\n'))
        print('\n') 
        course_great(SumList)
        print('\n')
        pass
    else:
        print('\n') 
        print('输入错误请重新输入!') #如果输入的数字不是0123就回到原来的交互界面
        print('\n') 
        pass
    

import numpy as np
import torch
from torch import nn
import matplotlib.pyplot as plt

# Define LSTM Neural Networks
class LstmRNN(nn.Module):
    """
        Parameters：
        - input_size: feature size
        - hidden_size: number of hidden units
        - output_size: number of output
        - num_layers: layers of LSTM to stack
    """
    def __init__(self, input_size, hidden_size=1, output_size=1, num_layers=1):
        super().__init__()
 
        self.lstm = nn.LSTM(input_size, hidden_size, num_layers) # utilize the LSTM model in torch.nn 
        self.forwardCalculation = nn.Linear(hidden_size, output_size)
 
    def forward(self, _x):
        x, _ = self.lstm(_x)  # _x is input, size (seq_len, batch, input_size)
        s, b, h = x.shape  # x is output, size (seq_len, batch, hidden_size)
        x = x.view(s*b, h)
        x = self.forwardCalculation(x)
        x = x.view(s, b, -1)
        return x

if __name__ == '__main__':
    # create database
    data_len = 200
    t = np.linspace(0, 12*np.pi, data_len)
    sin_t = np.sin(t)
    cos_t = np.cos(t)

    dataset = np.zeros((data_len, 2))
    dataset[:,0] = sin_t
    dataset[:,1] = cos_t
    dataset = dataset.astype('float32')

    # plot part of the original dataset
    plt.figure()
    plt.plot(t[0:60], dataset[0:60,0], label='sin(t)')
    plt.plot(t[0:60], dataset[0:60,1], label = 'cos(t)')
    plt.plot([2.5, 2.5], [-1.3, 0.55], 'r--', label='t = 2.5') # t = 2.5
    plt.plot([6.8, 6.8], [-1.3, 0.85], 'm--', label='t = 6.8') # t = 6.8
    plt.xlabel('t')
    plt.ylim(-1.2, 1.2)
    plt.ylabel('sin(t) and cos(t)')
    plt.legend(loc='upper right')

    # choose dataset for training and testing
    train_data_ratio = 0.5 # Choose 80% of the data for testing
    train_data_len = int(data_len*train_data_ratio)
    train_x = dataset[:train_data_len, 0]
    train_y = dataset[:train_data_len, 1]
    INPUT_FEATURES_NUM = 1
    OUTPUT_FEATURES_NUM = 1
    t_for_training = t[:train_data_len]

    # test_x = train_x
    # test_y = train_y
    test_x = dataset[train_data_len:, 0]
    test_y = dataset[train_data_len:, 1]
    t_for_testing = t[train_data_len:]

    # ----------------- train -------------------
    train_x_tensor = train_x.reshape(-1, 5, INPUT_FEATURES_NUM) # set batch size to 5
    train_y_tensor = train_y.reshape(-1, 5, OUTPUT_FEATURES_NUM) # set batch size to 5
 
    # transfer data to pytorch tensor
    train_x_tensor = torch.from_numpy(train_x_tensor)
    train_y_tensor = torch.from_numpy(train_y_tensor)
    # test_x_tensor = torch.from_numpy(test_x)
 
    lstm_model = LstmRNN(INPUT_FEATURES_NUM, 16, output_size=OUTPUT_FEATURES_NUM, num_layers=1) # 16 hidden units
    print('LSTM model:', lstm_model)
    print('model.parameters:', lstm_model.parameters)
 
    loss_function = nn.MSELoss()
    optimizer = torch.optim.Adam(lstm_model.parameters(), lr=1e-2)
 
    max_epochs = 10000
    for epoch in range(max_epochs):
        output = lstm_model(train_x_tensor)
        loss = loss_function(output, train_y_tensor)
 
        loss.backward()
        optimizer.step()
        optimizer.zero_grad()
 
        if loss.item() < 1e-4:
            print('Epoch [{}/{}], Loss: {:.5f}'.format(epoch+1, max_epochs, loss.item()))
            print("The loss value is reached")
            break
        elif (epoch+1) % 100 == 0:
            print('Epoch: [{}/{}], Loss:{:.5f}'.format(epoch+1, max_epochs, loss.item()))
 
    # prediction on training dataset
    predictive_y_for_training = lstm_model(train_x_tensor)
    predictive_y_for_training = predictive_y_for_training.view(-1, OUTPUT_FEATURES_NUM).data.numpy()

    # torch.save(lstm_model.state_dict(), 'model_params.pkl') # save model parameters to files
 
    # ----------------- test -------------------
    # lstm_model.load_state_dict(torch.load('model_params.pkl'))  # load model parameters from files
    lstm_model = lstm_model.eval() # switch to testing model

    # prediction on test dataset
    test_x_tensor = test_x.reshape(-1, 5, INPUT_FEATURES_NUM) # set batch size to 5, the same value with the training set
    test_x_tensor = torch.from_numpy(test_x_tensor)
 
    predictive_y_for_testing = lstm_model(test_x_tensor)
    predictive_y_for_testing = predictive_y_for_testing.view(-1, OUTPUT_FEATURES_NUM).data.numpy()
 
    # ----------------- plot -------------------
    plt.figure()
    plt.plot(t_for_training, train_x, 'g', label='sin_trn')
    plt.plot(t_for_training, train_y, 'b', label='ref_cos_trn')
    plt.plot(t_for_training, predictive_y_for_training, 'y--', label='pre_cos_trn')

    plt.plot(t_for_testing, test_x, 'c', label='sin_tst')
    plt.plot(t_for_testing, test_y, 'k', label='ref_cos_tst')
    plt.plot(t_for_testing, predictive_y_for_testing, 'm--', label='pre_cos_tst')

    plt.plot([t[train_data_len], t[train_data_len]], [-1.2, 4.0], 'r--', label='separation line') # separation line

    plt.xlabel('t')
    plt.ylabel('sin(t) and cos(t)')
    plt.xlim(t[0], t[-1])
    plt.ylim(-1.2, 4)
    plt.legend(loc='upper right')
    plt.text(14, 2, "train", size = 15, alpha = 1.0)
    plt.text(20, 2, "test", size = 15, alpha = 1.0)

    plt.show()











